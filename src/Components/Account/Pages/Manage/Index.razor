@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using SoulDashboard.Data

@inject UserManager<Employee> UserManager
@inject SignInManager<Employee> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage />

<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="username" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="d-flex flew-row mb-3">
                <div class="form-floating flex-grow-1">
                    <InputText @bind-Value="Input.Username" class="form-control" placeholder="Please enter your username." />
                    <label for="username" class="form-label">Username</label>
                    <ValidationMessage For="() => Input.Username" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-lg btn-primary">Save</button>
            </div>
        </EditForm>
        <EditForm Model="Input" FormName="phone-number" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="d-flex flew-row mb-3">
                <div class="form-floating flex-grow-1">
                    <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number." />
                    <label for="phone-number" class="form-label">Phone number</label>
                    <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-lg btn-primary">Save</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private Employee user = default!;
    private string? username;
    private string? phoneNumber;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);

        Input.Username ??= username;
        Input.PhoneNumber ??= phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.Username != username)
        {
            var setNameResult = await UserManager.SetUserNameAsync(user, Input.Username);
            if (!setNameResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus($"Error: Failed to set username. {setNameResult.Errors.FirstOrDefault()?.Description}", HttpContext);
            }
        }

        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus($"Error: Failed to set phone number. {setPhoneResult.Errors.FirstOrDefault()?.Description}", HttpContext);
            }
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Display(Name = "Username")]
        public string? Username { get; set; }

        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }
}
