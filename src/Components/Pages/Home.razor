@page "/"

@using Microsoft.EntityFrameworkCore
@using SoulDashboard.Database.Contexts

@rendermode RenderMode.InteractiveServer

@inject ApplicationDbContext Context

<PageTitle>Home</PageTitle>

<h1 class="header">Dashboard</h1>
<h4 class="header">Welcome !</h4>

<div class="canvas-container">
    <div class="canvas-row">
        <div class="line-container">
            <h4>Customer Overview</h4>
            <canvas id="customersOverviewChart"></canvas>
        </div>
        <div class="bar-container">
            <h4>Events</h4>
            <canvas id="eventsChart"></canvas>
        </div>
    </div>
    <div class="canvas-row">
        <div class="map-container">
            <h4>Customer by Country</h4>
            <canvas id="worldMapChart"></canvas>
        </div>
        <div class="donut-container">
            <h4>Meetings top sources</h4>
            <MudChart ChartType="ChartType.Pie" InputData="@_encounterSources.Values.ToArray()" @bind-SelectedIndex="Index" InputLabels="@_encounterSources.Keys.ToArray()" Width="300px" Height="300px" />
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-chart-geo"></script>

<script>
    const customersOverviewCtx = document.getElementById('customersOverviewChart').getContext('2d');
    const customersOverviewChart = new Chart(customersOverviewCtx, {
        type: 'line',
        data: {
            labels: ['01 Jul', '02 Jul', '03 Jul', '04 Jul', '05 Jul', '06 Jul', '07 Jul', '08 Jul', '09 Jul', '10 Jul', '11 Jul', '12 Jul', '13 Jul', '14 Jul', '15 Jul', '16 Jul', '17 Jul', '18 Jul', '19 Jul', '20 Jul', '21 Jul', '22 Jul', '23 Jul', '24 Jul', '25 Jul', '26 Jul', '27 Jul', '28 Jul', '29 Jul', '30 Jul'],
            datasets: [{
                label: 'Customers',
                data: [600, 650, 612, 678, 1054, 612, 751, 632, 842, 580, 750, 851, 932, 752, 923, 641, 671, 762, 721, 643, 512, 483, 546, 613, 761, 845, 943, 642, 542, 652],
                borderColor: '#798BFF',
                borderWidth: 2,
                fill: true,
                backgroundColor: 'rgba(156,170,255,0.2)',
                pointBackgroundColor: '#798BFF'
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    const eventsCtx = document.getElementById('eventsChart').getContext('2d');
    const eventsChart = new Chart(eventsCtx, {
        type: 'bar',
        data: {
            labels: ['01 Jul', '15 Jul', '30 Jul'],
            datasets: [{
                label: 'Events',
                data: [20, 35, 83],
                backgroundColor: '#9CAAFF',
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    const worldMapCtx = document.getElementById('worldMapChart').getContext('2d');
    fetch('https://unpkg.com/world-atlas/countries-50m.json')
        .then(response => response.json())
        .then(countries => {
            const countriesGeoJSON = ChartGeo.topojson.feature(countries, countries.objects.countries).features;
            const worldMapChart = new Chart(worldMapCtx, {
                type: 'choropleth',
                data: {
                    labels: countriesGeoJSON.map(d => d.properties.name),
                    datasets: [{
                        label: 'Customers by Country',
                        data: countriesGeoJSON.map(d => ({
                            feature: d,
                            value: Math.random() * 1000
                        }))
                    }]
                },
                options: {
                    showOutline: true,
                    showGraticule: true,
                    scales: {
                        xy: {
                            projection: 'equalEarth'
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        }
                    }
                }
            });
        });
</script>

@code {
    private IDictionary<string, double> _encounterSources = default!;

    private int Index { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _encounterSources = await Context.Encounters.GroupBy(e => e.Source)
            .ToDictionaryAsync(g => g.Key, g => (double)g.Count());

        await base.OnInitializedAsync();
    }
}
